#!/usr/bin/env bash

print_help () {
    echo "Usage: $0 [OPTION]... [COMMAND [ARGS]...]..."
    echo
    echo "Run the docker-wine container with behaviour determined by the following"
    echo "OPTIONS:"
    echo "  --local               Use locally built docker-wine image instead of pulling"
    echo "                          image from DockerHub"
    echo "  --run-as-root         Run as root"
    echo "  --run-as-me           Run using your current username, UID and GID (default"
    echo "                          when alternate --user-home value specified)"
    echo "  --rdp=OPTION          Runs docker-wine container with Remote Desktop Protocol"
    echo "                          server"
    echo "                        Valid values for OPTION are:"
    echo "                          no             Don't use RDP server (default)"
    echo "                          start          Start the RDP server as a detached"
    echo "                                           daemon"
    echo "                          stop           Stop the detached RDP server by"
    echo "                                           stopping the container"
    echo "                          restart        Restart the detached RDP server by"
    echo "                                           stopping and starting the container"
    echo "                          interactive    Start the RDP server and also run an"
    echo "                                           interactive bash session"
    echo "  --user-home=VALUE     Use an alternate volume to ${USER_VOLUME} for storing"
    echo "                          persistent user data (NOTE: Use with caution!)"
    echo "                        Valid values can specify either a docker volume or"
    echo "                          local path"
    echo "                        e.g."
    echo "                          --user-home=my_new_volume"
    echo "                          --user-home=/tmp/my_user"
    echo "  --user-passwd=VALUE   Specify a password for the user in plain text (default"
    echo "                          is the user's username)"
    echo "  --volume=VALUE        Specify additional volume(s) to be mounted"
    echo "                        Values are passed to docker run command as-is and use"
    echo "                          standard syntax for specifying volumes and mount"
    echo "                          points. Multiple --volume=value statements can be"
    echo "                          included to mount as many volumes as required"
    echo "  --help                Display this help screen and exit"
    echo
    echo "e.g."
    echo "  $0"
    echo "  $0 wine notepad.exe"
    echo "  $0 wineboot --init"
    echo "  $0 --local --volume=my_vol:/some/path:ro"
    echo "  $0 --local --run-as-me wine notepad"
    echo "  $0 --run-as-root --rdp=interactive"
    echo "  $0 --rdp=start --user-passwd=pa55w0rd"
}

add_run_arg () {
    local arg="$1"

    RUN_ARGS+=("${arg}")
}


# Set default values
DOCKER_IMAGE="scottyhardy/docker-wine:latest"
LOCAL_IMAGE="docker-wine:latest"
USE_LOCAL_IMAGE="no"
RDP_SERVER="no"
RUN_ARGS=()
USER_HOME="/home/wineuser"
USER_VOLUME="winehome"

while [ $# -gt 0 ]; do
  case "$1" in
    --local)
        USE_LOCAL_IMAGE="yes"
        ;;
    --run-as-root)
        add_run_arg --env="RUN_AS_ROOT=yes"
        ;;
    --run-as-me)
        add_run_arg --env="USER_NAME=$(whoami)"
        add_run_arg --env="USER_UID=$(id -u)"
        add_run_arg --env="USER_GID=$(id -g)"
        ;;
    --rdp=*)
        RDP_SERVER="${1#*=}"
        ;;
    --user-home=*)
        USER_HOME="${1#*=}"
        add_run_arg --env="USER_HOME=${USER_HOME}"
        ;;
    --user-passwd=*)
        add_run_arg --env="USER_PASSWD=${1#*=}"
        ;;
    --volume=*)
        add_run_arg "$1"
        ;;
    --help)
        print_help
        exit 0
        ;;
    -*)
        echo "ERROR: '$1' is not a valid option"
        echo
        print_help
        exit 1
        ;;
    *)
        break
        ;;
    esac
    shift
done

# Collect remaining command line args to pass to the container to run
CMD_ARGS=("$@")

# Sanity checks
if ! docker -v >/dev/null 2>&1; then
    echo "ERROR: Docker is not running or not installed, unable to proceed"
    exit 1
fi

if ! echo "${RDP_SERVER}" | grep -q -E '^(no|start|stop|restart|interactive)$'; then
    echo "ERROR: '${RDP_SERVER}' is not a valid value for --rdp option"
    exit 1
fi

if [ "${RDP_SERVER}" != "no" ] && [ -n "${CMD_ARGS[0]}" ]; then
    echo "ERROR: Commands cannot be passed to container when using --rdp option"
    exit 1
fi

# Grab the latest image from docker hub or use the locally built version
if [ "${USE_LOCAL_IMAGE}" == "no" ]; then
    docker pull "${DOCKER_IMAGE}"
else
    DOCKER_IMAGE="${LOCAL_IMAGE}"
fi

# Create the docker volume to store user's home only if using default winehome
if [ "${USER_VOLUME}" == "winehome" ] && ! docker volume ls -qf "name=winehome" | grep -q "^winehome$"; then
    echo "INFO: Creating Docker volume container 'winehome'..."
    docker volume create winehome
fi

# Add common docker run args
add_run_arg --rm
add_run_arg --hostname="$(hostname)"
add_run_arg --name="wine"
add_run_arg --volume="${USER_VOLUME}:${USER_HOME}"

# Run in RDP mode
if [ "${RDP_SERVER}" != "no" ]; then

    add_run_arg --env="RDP_SERVER=yes"
    add_run_arg --publish="3389:3389/tcp"

    case "${RDP_SERVER}" in
        interactive)
            docker run -it "${RUN_ARGS[@]}" "${DOCKER_IMAGE}" /bin/bash
            ;;
        start)
            docker run --detach "${RUN_ARGS[@]}" "${DOCKER_IMAGE}"
            ;;
        stop)
            docker kill wine
            exit $?
            ;;
        restart)
            docker kill wine
            docker run --detach "${RUN_ARGS[@]}" "${DOCKER_IMAGE}"
            ;;
        *)
            echo "ERROR: '${RDP_SERVER}' is not a valid value for --rdp option"
            exit 1
            ;;
    esac

# Run in X11 forwarding mode
else

    # Set CMD_ARGS to /bin/bash if no commands specified
    [ -z "${CMD_ARGS[0]}" ] && CMD_ARGS=("/bin/bash")

    # Run in X11 forwarding mode on macOS
    if [ "$(uname)" == "Darwin" ]; then

        # Check XQuartz installed
        if ! command -v xquartz >/dev/null 2>&1; then
            echo "ERROR: XQuartz does not appear to be installed"
            exit 1
        fi

        # Configure XQuartz
        if [ "$(defaults read org.macosforge.xquartz.X11 app_to_run)" != "/usr/bin/true" ]; then
            defaults write org.macosforge.xquartz.X11 app_to_run /usr/bin/true
        fi

        if [ "$(defaults read org.macosforge.xquartz.X11 nolisten_tcp)" != "0" ]; then
            defaults write org.macosforge.xquartz.X11 nolisten_tcp 0
        fi

        # Allow localhost to access XQuartz
        if ! xhost | grep -q "^INET:localhost$"; then
            echo "WARNING: Adding localhost to authorized xhost clients"
            xhost + 127.0.0.1
        fi

        # Add macOS run args
        add_run_arg --env="DISPLAY=host.docker.internal:0"

        docker run -it "${RUN_ARGS[@]}" "${DOCKER_IMAGE}" "${CMD_ARGS[@]}"

    # Run in X11 forwarding mode on Linux
    elif [ "$(uname)" == "Linux" ]; then

        # Check for .Xauthority command -v is required for authenticating as the current user on the host's X11 server
        if [ -z "${XAUTHORITY}" ] && [ -s "${HOME}/.Xauthority" ]; then
            echo "ERROR: No valid .Xauthority file found for X11"
            exit 1
        fi

        # Use audio if pulseaudio is installed
        if command -v pulseaudio >/dev/null 2>&1; then

            # One-off setup for creation of UNIX socket for pulseaudio to allow access for other users
            if [ ! -f "${HOME}/.config/pulse/default.pa" ]; then
                echo "INFO: Creating pulseaudio config file ${HOME}/.config/pulse/default.pa"
                mkdir -p "${HOME}/.config/pulse"
                echo -e ".include /etc/pulse/default.pa\nload-module module-native-protocol-unix auth-anonymous=1 socket=/tmp/pulse-socket" > "${HOME}/.config/pulse/default.pa"
            fi

            # Restart pulseaudio daemon to create the UNIX socket
            if [ ! -e "/tmp/pulse-socket" ]; then
                echo "INFO: No socket found for pulseaudio so restarting service..."
                pulseaudio -k
                pulseaudio --start
                sleep 1
            fi

            # Add the pulseaudio UNIX socket
            if [ -e "/tmp/pulse-socket" ]; then
                add_run_arg --volume="/tmp/pulse-socket:/tmp/pulse-socket"
            else
                echo "INFO: pulseaudio socket /tmp/pulse-socket doesn't exist, so sound will not function"
            fi
        else
            echo "INFO: pulseaudio not installed so running without sound"
        fi

        # Add Linux docker run args
        add_run_arg --env="DISPLAY"
        add_run_arg --volume="${XAUTHORITY:-${HOME}/.Xauthority}:/root/.Xauthority:ro"
        add_run_arg --volume="/tmp/.X11-unix:/tmp/.X11-unix:ro"
        add_run_arg --volume="/etc/localtime:/etc/localtime:ro"

        docker run -it "${RUN_ARGS[@]}" "${DOCKER_IMAGE}" "${CMD_ARGS[@]}"
    else
        echo "ERROR: Unknown operating system '$(uname)'"
        exit 1
    fi
fi
